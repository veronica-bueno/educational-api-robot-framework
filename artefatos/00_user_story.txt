### User Story ###

- Categorias
- Produtos 
- Usu√°rios

üè∑Ô∏è Categorias
    ### User Story 1: Cadastro de uma nova categoria ###
        Como administrador, 
        eu quero cadastrar uma nova categoria de produto 
        para que os produtos possam ser organizados.

        Crit√©rios de Aceita√ß√£o:
        - Ao realizar uma requisi√ß√£o POST para /categories com um payload JSON v√°lido (contendo os campos name e description), a API deve retornar o status code 201 Created.
        - A resposta deve conter o objeto da categoria criada, incluindo um _id gerado pela API.
        - Ao tentar cadastrar uma categoria sem o campo name no payload, a API deve retornar o status code 400 Bad Request e uma mensagem indicando a aus√™ncia do campo: {"message": "Por favor, preencha todos os campos obrigat√≥rios: nome e descri√ß√£o."}.

    ### User Story 2: Listagem de todas as categorias ###
        Como usu√°rio, 
        eu quero listar todas as categorias de produtos 
        para que eu possa navegar pelos diferentes tipos de produtos.

        Crit√©rios de Aceita√ß√£o:
        - Ao realizar uma requisi√ß√£o GET para /categories, a API deve retornar o status code 200 OK.
        - A resposta deve conter um array JSON na chave data com a lista de categorias.
        - Cada objeto de categoria no array deve conter os campos relevantes, como _id e name.

    ### User Story 3: Busca de categoria por ID ###
        Como usu√°rio, 
        eu quero buscar uma categoria espec√≠fica pelo seu ID 
        para que eu possa obter detalhes sobre ela.

        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de categoria existente, ao realizar uma requisi√ß√£o GET para /categories/{id}, a API deve retornar o status code 200 OK.
        - A resposta deve conter um objeto JSON com os detalhes da categoria solicitada na chave data.
        - Dado um ID de categoria inexistente, ao realizar uma requisi√ß√£o GET para /categories/{id}, a API deve retornar o status code 404 Not Found.
        - Para um ID inexistente, o corpo da resposta deve conter uma mensagem de erro informativa: {"message": "Categoria n√£o encontrada."}.

    ### User Story 4: Atualiza√ß√£o de uma categoria existente ###
        Como administrador, 
        eu quero atualizar a descri√ß√£o de uma categoria existente 
        para que a descri√ß√£o esteja sempre atualizada.
        
        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de categoria existente, ao realizar uma requisi√ß√£o PUT para /categories/{id} com um payload JSON v√°lido (contendo o campo description), a API deve retornar o status code 200 OK.
        - A resposta deve conter o objeto da categoria com a descri√ß√£o atualizada na chave data.
        - Observa√ß√£o: Se o campo name for omitido no payload, a atualiza√ß√£o da description ainda deve ser bem-sucedida com 200 OK, conforme o teste.
        - Observa√ß√£o: N√£o h√° um teste expl√≠cito para PUT com ID de categoria inexistente (404 Not Found).

    ### User Story 5: Exclus√£o de uma categoria ###
        Como administrador, 
        eu quero excluir uma categoria existente 
        para que ela n√£o seja mais utilizada para classificar produtos.

        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de categoria existente, ao realizar uma requisi√ß√£o DELETE para /categories/{id}, a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter uma mensagem de sucesso: {"message": "Categoria removida com sucesso", "success": true}.
        - Observa√ß√£o: N√£o h√° um teste expl√≠cito para DELETE com ID de categoria inexistente (404 Not Found).


üõçÔ∏è Produtos
    ### User Story 6: Listagem de todos os produtos ###
        Como um cliente, 
        eu quero listar todos os produtos dispon√≠veis 
        para que eu possa ver o cat√°logo completo da loja.

        Crit√©rios de Aceita√ß√£o:
        - Ao realizar uma requisi√ß√£o GET para /products, a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter um array JSON na chave data com a lista de produtos.
        - Cada objeto de produto no array deve conter os campos: _id (string), name (string), price (n√∫mero), description (string), quantity (inteiro) e category (string - ID da categoria).
        - Se n√£o houver produtos cadastrados, a API deve retornar um array vazio ([]) na chave data com status 200 OK.

    ### User Story 7: Busca de produto por ID ###
        Como um cliente, 
        eu quero buscar um produto espec√≠fico pelo seu ID 
        para que eu possa ver seus detalhes.

        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de produto existente, ao realizar uma requisi√ß√£o GET para /products/{id}, a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter um objeto JSON na chave data com os detalhes completos do produto solicitado correspondente ao {id} pesquisado.
        - Dado um ID de produto inexistente, ao realizar uma requisi√ß√£o GET para /products/{id}, a API deve retornar o status code 404 Not Found.
        - Para um ID inexistente, o corpo da resposta deve conter a mensagem de erro: {"message": "Produto n√£o encontrado."}.

    ### User Story 8: Cadastro de um novo produto ###
        Como administrador, 
        eu quero cadastrar um novo produto no sistema 
        para que ele fique dispon√≠vel no cat√°logo de vendas.

        Crit√©rios de Aceita√ß√£o:
        - Ao realizar uma requisi√ß√£o POST para /products com um payload JSON v√°lido (contendo name, price, description, quantity e category), a API deve retornar o status code 201 Created.
        - O corpo da resposta deve conter o objeto do produto rec√©m-criado na chave data, incluindo o _id gerado pelo sistema.
        - Ao tentar cadastrar um produto com um ou mais campos obrigat√≥rios faltando no payload (ex: price ou quantity), a API deve retornar o status code 400 Bad Request.
        - Para campos obrigat√≥rios ausentes, o corpo da resposta deve conter a mensagem: {"message": "Por favor, preencha todos os campos obrigat√≥rios: nome, descri√ß√£o, pre√ßo, quantidade e categoria."}.
        

    ### User Story 9: Atualiza√ß√£o de um produto existente ###
        Como administrador, 
        eu quero atualizar as informa√ß√µes de um produto existente 
        para que os dados do cat√°logo se mantenham corretos.

        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de produto existente, ao realizar uma requisi√ß√£o PUT para /products/{id} com um payload JSON v√°lido (permitindo atualiza√ß√£o parcial de campos como description e quantity), a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter o objeto do produto na chave data com as informa√ß√µes atualizadas.
        - Dado um ID de produto inexistente, ao realizar uma requisi√ß√£o PUT para /products/{id}, a API deve retornar o status code 404 Not Found.
    

    ### User Story 10: Exclus√£o de um produto ###
        Como administrador, 
        eu quero excluir um produto do sistema 
        para que ele n√£o esteja mais dispon√≠vel para venda.

        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de produto existente, ao realizar uma requisi√ß√£o DELETE para /products/{id}, a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter a mensagem de confirma√ß√£o: {"message": "Produto removido com sucesso.", "success": true}.
        - Dado um ID de produto inexistente, ao realizar uma requisi√ß√£o DELETE para /products/{id}, a API deve retornar o status code 404 Not Found.
        - Para um ID inexistente, o corpo da resposta deve conter a mensagem de erro: {"message": "Produto n√£o encontrado para exclus√£o."}.

    ### User Story 11: Listagem de produtos por categoria ###
        Como um cliente, 
        eu quero listar todos os produtos de uma categoria espec√≠fica 
        para que eu possa encontrar itens semelhantes mais facilmente.

        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de categoria existente, ao realizar uma requisi√ß√£o GET para /products/category/{categoriaId}, a API deve retornar 200 OK.
        - O corpo da resposta deve conter um array JSON na chave data com a lista de produtos pertencentes a essa categoria.
        - Dado um ID de categoria inexistente, ao realizar uma requisi√ß√£o GET para /products/category/{categoriaId}, a API deve retornar 404 Not Found.
        - Para um ID de categoria inexistente, o corpo da resposta deve conter a mensagem de erro: {"message": "Categoria n√£o encontrada."}.
        - Dado um ID de categoria que existe mas n√£o possui produtos associados, a API deve retornar 200 OK e um array vazio ([]) na chave data.

üë§ Usu√°rios
    ### User Story 12: Cadastro de um novo usu√°rio ###
        Como administrador, 
        eu quero cadastrar um novo usu√°rio no sistema 
        para que ele possa acessar as funcionalidades permitidas.
        
        Crit√©rios de Aceita√ß√£o:
        - Ao realizar uma requisi√ß√£o POST para /users com um payload JSON v√°lido (contendo os campos name e email), a API deve retornar o status code 201 Created.
        - O corpo da resposta deve conter o objeto do usu√°rio rec√©m-criado na chave data, incluindo um _id gerado pelo sistema.
        - Ao tentar cadastrar um usu√°rio com um payload JSON incompleto (faltando campos obrigat√≥rios como name ou email), a API deve retornar o status code 400 Bad Request.
        - Para campos obrigat√≥rios ausentes, o corpo da resposta deve conter a mensagem: {"message": "Por favor, preencha todos os campos obrigat√≥rios: nome e email."}.
    
    ### User Story 13: Listagem de todos os usu√°rios ###
        Como administrador, 
        eu quero listar todos os usu√°rios cadastrados no sistema 
        para que eu possa ter uma vis√£o geral dos acessos.
        
        Crit√©rios de Aceita√ß√£o:
        - Ao realizar uma requisi√ß√£o GET para /users, a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter um array JSON na chave data com a lista de usu√°rios.
        - Cada objeto de usu√°rio no array deve conter os campos: _id (string), name (string) e email (string).
        - Se n√£o houver usu√°rios cadastrados, a API deve retornar um array vazio ([]) na chave data com status 200 OK.

    ### User Story 14: Busca de usu√°rio por ID
        Como administrador, 
        eu quero buscar um usu√°rio espec√≠fico pelo seu ID 
        para que eu possa verificar ou gerenciar seus detalhes.
        
        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de usu√°rio existente, ao realizar uma requisi√ß√£o GET para /users/{id}, a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter um objeto JSON na chave data com os detalhes completos do usu√°rio solicitado.
        - Dado um ID de usu√°rio inexistente, ao realizar uma requisi√ß√£o GET para /users/{id}, a API deve retornar o status code 404 Not Found.
        - Para um ID inexistente, o corpo da resposta deve conter a mensagem de erro informativa: {"message": "Usu√°rio n√£o encontrado."}.

    ### User Story 15: Exclus√£o de um usu√°rio ###
        Como administrador, 
        eu quero excluir um usu√°rio do sistema 
        para que ele perca o acesso.

        Crit√©rios de Aceita√ß√£o:
        - Dado um ID de usu√°rio existente, ao realizar uma requisi√ß√£o DELETE para /users/{id}, a API deve retornar o status code 200 OK.
        - O corpo da resposta deve conter a mensagem de sucesso: {"message": "Usu√°rio removido com sucesso.", "success": true}.
        - Dado um ID de usu√°rio inexistente, ao realizar uma requisi√ß√£o DELETE para /users/{id}, a API deve retornar o status code 404 Not Found.
        - Para um ID inexistente, o corpo da resposta deve conter a mensagem de erro: {"message": "Usu√°rio n√£o encontrado para exclus√£o."}.


