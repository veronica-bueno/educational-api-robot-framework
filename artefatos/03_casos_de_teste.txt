### Test Case ###

Casos de Testes em Gherkin/PT

üè∑Ô∏è Categorias

  Cen√°rio: Cadastrar uma Nova Categoria (Cen√°rio de Sucesso)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o POST √© enviada para "/categories" com um payload JSON v√°lido contendo nome e descri√ß√£o
    Ent√£o a API deve retornar o status code 201 Created
    E o corpo da resposta deve conter o objeto da categoria criada, incluindo um "_id" gerado pela API

  Cen√°rio: Cadastrar Categoria sem Nome (Cen√°rio de Falha)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o POST √© enviada para "/categories"
    E o payload JSON n√£o cont√©m o campo "name"
    Ent√£o a API deve retornar o status code 400 Bad Request
    E o corpo da resposta deve conter a mensagem: "Por favor, preencha todos os campos obrigat√≥rios: nome e descri√ß√£o."

  Cen√°rio: Buscar Categoria Cadastrada por ID (Cen√°rio de Sucesso)
    Dado que uma categoria existe com um ID conhecido
    Quando uma requisi√ß√£o GET √© enviada para "/categories/{id}" usando o ID da categoria existente
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter o objeto JSON com os detalhes da categoria solicitada

  Cen√°rio: Buscar Categoria N√£o Cadastrada (Cen√°rio de Falha)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o GET √© enviada para "/categories/{id}" com um ID de categoria que n√£o existe
    Ent√£o a API deve retornar o status code 404 Not Found
    E o corpo da resposta deve conter a mensagem: "Categoria n√£o encontrada."

  Cen√°rio: Atualizar Categoria Cadastrada
    Dado que uma categoria existe com um ID conhecido
    Quando uma requisi√ß√£o PUT √© enviada para "/categories/{id}" usando o ID da categoria existente
    E o payload JSON cont√©m a "description" atualizada (sem o campo "name")
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter o objeto da categoria com a descri√ß√£o atualizada

  Cen√°rio: Excluir Categoria Cadastrada
    Dado que uma categoria existe com um ID conhecido
    Quando uma requisi√ß√£o DELETE √© enviada para "/categories/{id}" usando o ID da categoria existente
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter a mensagem: "Categoria removida com sucesso"
    E o campo "success" no corpo da resposta deve ser "true"

  Cen√°rio: Listar Todas as Categorias Cadastradas
    Dado que o sistema cont√©m categorias cadastradas
    Quando uma requisi√ß√£o GET √© enviada para "/categories"
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter um array JSON com a lista de categorias
    E cada objeto de categoria no array deve conter os campos "_id" e "name"

üõçÔ∏è Produtos

  Cen√°rio: Cadastrar um Novo Produto (Cen√°rio de Sucesso)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    E uma categoria existente est√° dispon√≠vel
    Quando uma requisi√ß√£o POST √© enviada para "/products" com um payload JSON v√°lido contendo nome, pre√ßo, descri√ß√£o, quantidade e o ID da categoria
    Ent√£o a API deve retornar o status code 201 Created
    E o corpo da resposta deve conter o objeto do produto rec√©m-criado, incluindo um "_id" gerado pela API

  Cen√°rio: Cadastrar Produto sem Campos Obrigat√≥rios (Cen√°rio de Falha)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o POST √© enviada para "/products"
    E o payload JSON n√£o cont√©m campos obrigat√≥rios como "price" ou "quantity"
    Ent√£o a API deve retornar o status code 400 Bad Request
    E o corpo da resposta deve conter a mensagem: "Por favor, preencha todos os campos obrigat√≥rios: nome, descri√ß√£o, pre√ßo, quantidade e categoria."

  Cen√°rio: Buscar Produto Cadastrado por ID (Cen√°rio de Sucesso)
    Dado que um produto existe com um ID conhecido
    Quando uma requisi√ß√£o GET √© enviada para "/products/{id}" usando o ID do produto existente
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter o objeto JSON com os detalhes completos do produto solicitado

  Cen√°rio: Buscar Produto N√£o Cadastrado (Cen√°rio de Falha)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o GET √© enviada para "/products/{id}" com um ID de produto que n√£o existe
    Ent√£o a API deve retornar o status code 404 Not Found
    E o corpo da resposta deve conter a mensagem: "Produto n√£o encontrado."

  Cen√°rio: Atualizar Produto Cadastrado
    Dado que um produto existe com um ID conhecido
    Quando uma requisi√ß√£o PUT √© enviada para "/products/{id}" usando o ID do produto existente
    E o payload JSON cont√©m informa√ß√µes atualizadas (ex: descri√ß√£o e quantidade)
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter o objeto do produto com as informa√ß√µes atualizadas

  Cen√°rio: Excluir Produto Cadastrado
    Dado que um produto existe com um ID conhecido
    Quando uma requisi√ß√£o DELETE √© enviada para "/products/{id}" usando o ID do produto existente
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter a mensagem: "Produto removido com sucesso."
    E o campo "success" no corpo da resposta deve ser "true"

  Cen√°rio: Listar Todos os Produtos Cadastrados
    Dado que o sistema cont√©m produtos cadastrados
    Quando uma requisi√ß√£o GET √© enviada para "/products"
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter um array JSON com a lista de produtos
    E cada objeto de produto no array deve conter os campos "_id", "name", "price", "description", "quantity" e "category"

  Cen√°rio: Listar Produtos por ID de Categoria (Cen√°rio de Sucesso)
    Dado que uma categoria existe com um ID conhecido e possui produtos associados
    Quando uma requisi√ß√£o GET √© enviada para "/products/category/{categoriaId}" usando o ID da categoria existente
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter um array JSON com a lista de produtos pertencentes a essa categoria

  Cen√°rio: Listar Produtos de Categoria Inexistente (Cen√°rio de Falha)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o GET √© enviada para "/products/category/{categoriaId}" com um ID de categoria que n√£o existe
    Ent√£o a API deve retornar o status code 404 Not Found
    E o corpo da resposta deve conter a mensagem: "Categoria n√£o encontrada."

  Cen√°rio: Listar Produtos de Categoria Existente sem Produtos Associados
    Dado que uma categoria existe com um ID conhecido mas n√£o possui produtos associados
    Quando uma requisi√ß√£o GET √© enviada para "/products/category/{categoriaId}" usando o ID da categoria
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter um array JSON vazio ([])

  
üë§ Usu√°rios

  Cen√°rio: Cadastrar um Novo Usu√°rio (Cen√°rio de Sucesso)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o POST √© enviada para "/users" com um payload JSON v√°lido contendo nome e email
    Ent√£o a API deve retornar o status code 201 Created
    E o corpo da resposta deve conter o objeto do usu√°rio rec√©m-criado, incluindo um "_id" gerado pela API

  Cen√°rio: Cadastrar Usu√°rio sem Campos Obrigat√≥rios (Cen√°rio de Falha)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o POST √© enviada para "/users"
    E o payload JSON n√£o cont√©m o campo "name"
    Ent√£o a API deve retornar o status code 400 Bad Request
    E o corpo da resposta deve conter a mensagem: "Por favor, preencha todos os campos obrigat√≥rios: nome e email."

  Cen√°rio: Buscar Usu√°rio Cadastrado por ID (Cen√°rio de Sucesso)
    Dado que um usu√°rio existe com um ID conhecido
    Quando uma requisi√ß√£o GET √© enviada para "/users/{id}" usando o ID do usu√°rio existente
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter o objeto JSON com os detalhes completos do usu√°rio solicitado

  Cen√°rio: Buscar Usu√°rio N√£o Cadastrado (Cen√°rio de Falha)
    Dado que o sistema est√° pronto para receber requisi√ß√µes de API
    Quando uma requisi√ß√£o GET √© enviada para "/users/{id}" com um ID de usu√°rio que n√£o existe
    Ent√£o a API deve retornar o status code 404 Not Found
    E o corpo da resposta deve conter a mensagem: "Usu√°rio n√£o encontrado."

  Cen√°rio: Excluir Usu√°rio Cadastrado
    Dado que um usu√°rio existe com um ID conhecido
    Quando uma requisi√ß√£o DELETE √© enviada para "/users/{id}" usando o ID do usu√°rio existente
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter a mensagem: "Usu√°rio removido com sucesso."
    E o campo "success" no corpo da resposta deve ser "true"

  Cen√°rio: Listar Todos os Usu√°rios Cadastrados
    Dado que o sistema cont√©m usu√°rios cadastrados
    Quando uma requisi√ß√£o GET √© enviada para "/users"
    Ent√£o a API deve retornar o status code 200 OK
    E o corpo da resposta deve conter um array JSON com a lista de usu√°rios
    E cada objeto de usu√°rio no array deve conter os campos "_id", "name" e "email"
